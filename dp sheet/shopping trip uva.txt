#include<bits/stdc++.h>
using namespace std;
#define ll long long
ll dp[(1<<14)+10][14];
ll dist[55][55];
vector<ll>opera(55),save(55);
ll q;
ll solve(ll mask,ll pos)
{
    if(mask==((1<<(q+1))-1)) return -dist[0][opera[pos]];

    if(dp[mask][pos]!=-1) return dp[mask][pos];

    ll res = -dist[0][opera[pos]];

    for(ll i=1;i<=q;i++)
    {
        if(!(mask&(1<<i)))
        {
            res= max(res,solve(mask|(1<<i),i)+save[i]-dist[opera[pos]][opera[i]]);

        }
    }
    return dp[mask][pos]=res;

}

int main()
{
    ll t;  cin>>t;
    while(t--)
    {
        ll n,m;  cin>>n>>m;
        for(ll i=0;i<=n;i++)
        {
            for(ll j=0;j<=n;j++)
            {
                dist[i][j]=INT_MAX;
            }
            dist[i][i]=0;
        }

        for(ll i=0;i<m;i++)
        {
            ll u,v;
            double dollar;
            cin>>u>>v>>dollar;
            ll cost = (ll)round(dollar*100.0);
            dist[u][v]=min(dist[u][v],cost);
            dist[v][u]=min(dist[v][u],cost);
        }
        for(ll k=0;k<=n;k++)
        {
            for(ll i=0;i<=n;i++)
            {
                for(ll j=0;j<=n;j++)
                {
                    dist[i][j]= min(dist[i][j],dist[i][k]+dist[k][j]);
                }
            }
        }
          cin>>q;
        for(ll i=1;i<=q;i++)
        {
           double dollar;
           cin>>opera[i]>>dollar;
           save[i]=(ll)round(dollar*100.0);
        }
        memset(dp,-1,sizeof(dp));
        ll ans= solve(1,0);
        cout<<ans<<endl;
    }
}
